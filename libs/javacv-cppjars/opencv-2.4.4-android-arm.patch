diff -ruN OpenCV-2.4.4/android.cmake OpenCV-2.4.4-android/android.cmake
--- OpenCV-2.4.4/android.cmake	1970-01-01 09:00:00.000000000 +0900
+++ OpenCV-2.4.4-android/android.cmake	2013-03-02 19:26:04.991791593 +0900
@@ -0,0 +1,33 @@
+# CMake toolchain to build OpenCV 2.4.4 for Android 2.2. Sample usage:
+#
+# ANDROID_BIN=`pwd`/../android-ndk-r8d/toolchains/arm-linux-androideabi-4.6/prebuilt/linux-x86/bin/ \
+# ANDROID_CPP=`pwd`/../android-ndk-r8d/sources/cxx-stl/gnu-libstdc++/4.6/ \
+# ANDROID_ROOT=`pwd`/../android-ndk-r8d/platforms/android-9/arch-arm/ \
+# cmake -DCMAKE_TOOLCHAIN_FILE=android.cmake -DCMAKE_INSTALL_PREFIX=.. -DBUILD_SHARED_LIBS=ON \
+# -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_ANDROID_EXAMPLES=OFF -DWITH_OPENEXR=NO
+#
+# If you really need to use OpenCV on a CPU with no FPU, replace "libs/armeabi-v7a" by "libs/armeabi" and
+# "-march=armv7-a -mfloat-abi=softfp -mfpu=vfp -mfpu=neon" with "-march=armv5te -mtune=xscale -msoft-float"
+
+set(CMAKE_SYSTEM_NAME UnixPaths)
+set(CMAKE_SYSTEM_PROCESSOR arm)
+set(ANDROID TRUE)
+
+set(CMAKE_C_COMPILER   "$ENV{ANDROID_BIN}/arm-linux-androideabi-gcc")
+set(CMAKE_CXX_COMPILER "$ENV{ANDROID_BIN}/arm-linux-androideabi-g++")
+
+set(CMAKE_C_LINK_EXECUTABLE    "<CMAKE_C_COMPILER>   <FLAGS> <CMAKE_C_LINK_FLAGS>   <LINK_FLAGS> <OBJECTS> -o <TARGET> -nostdlib <LINK_LIBRARIES> -L$ENV{ANDROID_ROOT}/usr/lib/ -lgcc -ldl -lz -lm -lc")
+set(CMAKE_CXX_LINK_EXECUTABLE  "<CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> -nostdlib <LINK_LIBRARIES> -L$ENV{ANDROID_CPP}/libs/armeabi-v7a/ -L$ENV{ANDROID_ROOT}/usr/lib/ -lgnustl_static -lgcc -ldl -lz -lm -lc")
+
+set(CMAKE_C_CREATE_SHARED_LIBRARY    "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_C_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> -nostdlib <LINK_LIBRARIES> -L$ENV{ANDROID_ROOT}/usr/lib/ -lgcc -ldl -lz -lm -lc")
+set(CMAKE_CXX_CREATE_SHARED_LIBRARY  "<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> -nostdlib <LINK_LIBRARIES> -L$ENV{ANDROID_CPP}/libs/armeabi-v7a/ -L$ENV{ANDROID_ROOT}/usr/lib/ -lgnustl_static -lgcc -ldl -lz -lm -lc")
+
+add_definitions("-DANDROID -fPIC -ffunction-sections -funwind-tables -fstack-protector -march=armv7-a -mfloat-abi=softfp -mfpu=vfp -mfpu=neon -fomit-frame-pointer -fstrict-aliasing -funswitch-loops -finline-limit=300")
+
+include_directories("$ENV{ANDROID_CPP}/include/", "$ENV{ANDROID_CPP}/libs/armeabi-v7a/include/" "$ENV{ANDROID_ROOT}/usr/include/")
+
+set(ANDROID_NATIVE_API_LEVEL 7) # makes OpenCV's build system work without having to rename modules and what not
+
+macro(ANDROID_GET_ABI_RAWNAME)  # placeholder, no need of that in Java
+endmacro()
+
diff -ruN OpenCV-2.4.4/CMakeLists.txt OpenCV-2.4.4-android/CMakeLists.txt
--- OpenCV-2.4.4/CMakeLists.txt	2013-03-02 00:48:03.000000000 +0900
+++ OpenCV-2.4.4-android/CMakeLists.txt	2013-03-02 19:25:37.262445981 +0900
@@ -228,14 +228,6 @@
   set(OPENCV_DOC_INSTALL_PATH share/OpenCV/doc)
 endif()
 
-if(ANDROID)
-  set(LIBRARY_OUTPUT_PATH         "${OpenCV_BINARY_DIR}/lib/${ANDROID_NDK_ABI_NAME}")
-  set(3P_LIBRARY_OUTPUT_PATH      "${OpenCV_BINARY_DIR}/3rdparty/lib/${ANDROID_NDK_ABI_NAME}")
-  set(OPENCV_LIB_INSTALL_PATH     sdk/native/libs/${ANDROID_NDK_ABI_NAME})
-  set(OPENCV_3P_LIB_INSTALL_PATH  sdk/native/3rdparty/libs/${ANDROID_NDK_ABI_NAME})
-  set(OPENCV_CONFIG_INSTALL_PATH  sdk/native/jni)
-  set(OPENCV_INCLUDE_INSTALL_PATH sdk/native/jni/include)
-else()
   set(LIBRARY_OUTPUT_PATH         "${OpenCV_BINARY_DIR}/lib")
   set(3P_LIBRARY_OUTPUT_PATH      "${OpenCV_BINARY_DIR}/3rdparty/lib${LIB_SUFFIX}")
   set(OPENCV_LIB_INSTALL_PATH     lib${LIB_SUFFIX})
@@ -248,7 +240,6 @@
   else()
     set(OPENCV_CONFIG_INSTALL_PATH share/OpenCV)
   endif()
-endif()
 
 set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${OPENCV_LIB_INSTALL_PATH}")
 set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
